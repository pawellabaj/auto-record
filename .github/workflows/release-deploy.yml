name: "Deploy release"

permissions:
  contents: write
  pull-requests: write

on:
  workflow_dispatch:

concurrency:
  group: release-deploy-{{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  next-version:
    name: Get Release version
    if: ${{ github.ref == 'refs/heads/main' }}
    uses: semantic-release-action/next-release-version/.github/workflows/next-release-version.yml@v4

  release-perform:
    name: Deploy release
    runs-on: ubuntu-latest
    if: ${{ needs.branch-exists.outputs.exists != 'true' && needs.next-version.outputs.new-release-version != '' }}
    needs:
      - next-version
    env:
      RELEASE_VERSION: ${{ needs.next-version.outputs.new-release-version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create git user and release branch
        shell: bash
        run: |
          git config user.name ${{ github.actor }}
          git config user.email ${{ github.actor }}@users.noreply.github.com
          git branch release/v${{ env.RELEASE_VERSION }}
          git checkout release/v${{ env.RELEASE_VERSION }}

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: maven
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: GPG_PASSPHRASE

      - name: Install GPG ownertrust
        run: |
          echo ${{ secrets.GPG_TRUSTVALUES }} > trustvalues.txt
          gpg --import-ownertrust trustvalues.txt

      - name: Perform Maven release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          mvn -B -U -ntp release:prepare -DreleaseVersion=${{ env.RELEASE_VERSION }} -P release -Darguments=-Dgpg.passphrase=${{ secrets.GPG_PASSPHRASE }}
          mvn -B -U -ntp release:perform -DreleaseVersion=${{ env.RELEASE_VERSION }} -P release 

      - name: Create and merge pull request
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_url=$(gh pr create --title "PR from release/v${{ env.RELEASE_VERSION }} to main" --body "chore: [ci skip] PR from release/v${{ env.RELEASE_VERSION }} to main" --base main --head release/v${{ env.RELEASE_VERSION }})
          number=${pr_url##*/}
          gh pr merge $number --admin --delete-branch --merge

      - name: Create GH release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ env.RELEASE_VERSION }} target/auto-record-${{ env.RELEASE_VERSION }}.jar --generate-notes --verify-tag
