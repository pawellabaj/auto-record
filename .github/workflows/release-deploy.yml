name: Release and deploy

permissions:
  contents: write

on: workflow_dispatch

concurrency:
  group: release-deploy-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  next-version:
    name: Get Next version
    if: ${{ github.ref == 'refs/heads/main' }}
    uses: semantic-release-action/next-release-version/.github/workflows/next-release-version.yml@v4

  call-release-internal:
    name: Release
    runs-on: ubuntu-latest
    if: needs.next-version.outputs.new-release-published == 'true'
    needs:
      - next-version
    env:
      RELEASE_VERSION: ${{ needs.next-version.outputs.new-release-version }}

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache Maven Repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Setup JDK
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: temurin
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Install GPG Secret Key
        id: install-secret-key
        shell: bash
        run: cat <(echo -e "${{ secrets.GPG_PRIVATE_KEY }}") | gpg --batch --import

      - name: Create release branch
        shell: bash
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git checkout -b release-${{ env.RELEASE_VERSION }} origin/main
          git push --set-upstream origin release-${{ genv.RELEASE_VERSION }}

      - name: Release prepare and perform
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          mvn release:prepare -DreleaseVersion=${{ env.RELEASE_VERSION }} -B -P release
          mvn release:perform -DreleaseVersion=${{ env.RELEASE_VERSION }} -B -P release

      - name: Merge release branch
        run: |
          git checkout main
          git merge release/v${{ env.RELEASE_VERSION }} -m "Merge release branch v${{ env.RELEASE_VERSION }} into main"
          git branch -d release/v${{ env.RELEASE_VERSION }}

      - name: Create GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ env.RELEASE_VERSION }}
          removeArtifacts: true
          artifacts: target/auto-record-${{ env.RELEASE_VERSION }}.jar
          generateReleaseNotes: true
