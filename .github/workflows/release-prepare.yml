name: "[Release] Prepare"

permissions:
  contents: write

on:
  workflow_dispatch:
  push:
    branches: main

concurrency:
  group: release-prepare-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  next-version:
    name: Get Next version
    if: ${{ github.ref == 'refs/heads/main' }}
    uses: semantic-release-action/next-release-version/.github/workflows/next-release-version.yml@v4

  branch-exists:
    name: Check if release branch exists already
    runs-on: ubuntu-latest
    if: ${{ needs.next-version.outputs.new-release-published == 'true' && needs.next-version.outputs.new-release-version != '' }}
    needs:
      - next-version
    outputs:
      exists: ${{ steps.check-branch-exists.outputs.exists }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check if branch exists
        id: check-branch-exists
        run: |
          if [[ -n $(git ls-remote --heads origin release/v${{ env.RELEASE_VERSION }}) ]]; then
              echo "exists=true" >> $GITHUB_OUTPUT
              echo branch release/v${{ env.RELEASE_VERSION }} exists
          fi

  release-prepare:
    name: Prepare release
    runs-on: ubuntu-latest
    if: ${{ needs.branch-exists.outputs.exists != 'true' }}
    needs:
      - next-version
      - branch-exists
    env:
      RELEASE_VERSION: ${{ needs.next-version.outputs.new-release-version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create git user and branch
        shell: bash
        run: |
          echo ${{ needs.branch-exists.outputs.exists }}
          git config user.name ${{ github.actor }}
          git config user.email ${{ github.actor }}@users.noreply.github.com
          git checkout -b release/v${{ env.RELEASE_VERSION }} origin/main

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: maven
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: GPG_PASSPHRASE

      - name: Install GPG ownertrust
        id: install-secret-key
        run: |
          echo ${{ secrets.GPG_TRUSTVALUES }} > trustvalues.txt
          gpg --import-ownertrust trustvalues.txt

      - name: Prepare Maven release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          mvn -B -U -ntp release:prepare -DreleaseVersion=${{ env.RELEASE_VERSION }} -P release -Darguments=-Dgpg.passphrase=${{ secrets.GPG_PASSPHRASE }}

      - name: Create GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ env.RELEASE_VERSION }}
          removeArtifacts: true
          artifacts: target/auto-record-${{ env.RELEASE_VERSION }}.jar
          generateReleaseNotes: true
          draft: true